// Code generated by MockGen. DO NOT EDIT.
// Source: ./transport.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	pb "github.com/Mulily0513/C2KV/pb"
	types "github.com/Mulily0513/C2KV/transport/types"
	gomock "github.com/golang/mock/gomock"
)

// MockRaftOperator is a mock of RaftOperator interface.
type MockRaftOperator struct {
	ctrl     *gomock.Controller
	recorder *MockRaftOperatorMockRecorder
}

// MockRaftOperatorMockRecorder is the mock recorder for MockRaftOperator.
type MockRaftOperatorMockRecorder struct {
	mock *MockRaftOperator
}

// NewMockRaftOperator creates a new mock instance.
func NewMockRaftOperator(ctrl *gomock.Controller) *MockRaftOperator {
	mock := &MockRaftOperator{ctrl: ctrl}
	mock.recorder = &MockRaftOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftOperator) EXPECT() *MockRaftOperatorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m_2 *MockRaftOperator) Process(m *pb.Message) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "Process", m)
}

// Process indicates an expected call of Process.
func (mr *MockRaftOperatorMockRecorder) Process(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockRaftOperator)(nil).Process), m)
}

// ReportUnreachable mocks base method.
func (m *MockRaftOperator) ReportUnreachable(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportUnreachable", id)
}

// ReportUnreachable indicates an expected call of ReportUnreachable.
func (mr *MockRaftOperatorMockRecorder) ReportUnreachable(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUnreachable", reflect.TypeOf((*MockRaftOperator)(nil).ReportUnreachable), id)
}

// MockTransporter is a mock of Transporter interface.
type MockTransporter struct {
	ctrl     *gomock.Controller
	recorder *MockTransporterMockRecorder
}

// MockTransporterMockRecorder is the mock recorder for MockTransporter.
type MockTransporterMockRecorder struct {
	mock *MockTransporter
}

// NewMockTransporter creates a new mock instance.
func NewMockTransporter(ctrl *gomock.Controller) *MockTransporter {
	mock := &MockTransporter{ctrl: ctrl}
	mock.recorder = &MockTransporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransporter) EXPECT() *MockTransporterMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockTransporter) AddPeer(id types.ID, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeer", id, url)
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockTransporterMockRecorder) AddPeer(id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockTransporter)(nil).AddPeer), id, url)
}

// ListenPeer mocks base method.
func (m *MockTransporter) ListenPeer(localIp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenPeer", localIp)
}

// ListenPeer indicates an expected call of ListenPeer.
func (mr *MockTransporterMockRecorder) ListenPeer(localIp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenPeer", reflect.TypeOf((*MockTransporter)(nil).ListenPeer), localIp)
}

// Send mocks base method.
func (m_2 *MockTransporter) Send(m []*pb.Message) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "Send", m)
}

// Send indicates an expected call of Send.
func (mr *MockTransporterMockRecorder) Send(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransporter)(nil).Send), m)
}

// Stop mocks base method.
func (m *MockTransporter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTransporterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransporter)(nil).Stop))
}
